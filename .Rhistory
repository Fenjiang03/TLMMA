return((x/sigma^2) * exp(-x^2/(2 * sigma^2)))
}
Rayleigh_MH = function(sigma, m, x0) {
x = numeric(m);  x[1] = x0;  u = runif(m);
for (i in 2:m) {
xt = x[i-1]
y = rchisq(1, df = xt)
num = f(y, sigma) * dchisq(xt, df = y)
den = f(xt, sigma) * dchisq(y, df = xt)
alpha=num/den
if (u[i] <= alpha)
x[i] = y
else x[i] = xt
}
return(x)
}
sigma=2
x0 = c(1/sigma^3, 1/sigma, sigma^2, sigma^4)
k = 4
m = 2000
X = matrix(0, nrow = k, ncol = m)
for (i in 1:k)
X[i, ] = Rayleigh_MH(sigma, m, x0[i])
phi = t(apply(X, 1, cumsum))
for (i in 1:nrow(phi))
phi[i, ] = phi[i, ]/(1:ncol(phi))
rhat=Gelman_Rubin(phi)
rhat
library(coda)
X1=as.mcmc(X[1, ])
X2=as.mcmc(X[2, ])
X3=as.mcmc(X[3, ])
X4=as.mcmc(X[4, ])
Y=mcmc.list(X1, X2, X3, X4)
gelman.plot(Y, col = c(1, 1))
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
rejacc_beta=function(n,a,b){
j=0; k=0; y=NULL;
while (k < n) {
j=j+1;
u=runif(1) #random variate u from U(0,1)
x=runif(1) #random variate x from g(.)
if (x^2*(1-x)>u) {
k=k+1
y[k]=x}
}
return(y)
}
n=1000; a=3; b=2
y=rejacc_beta(n,a,b)
hist(y, prob = TRUE, main = expression("Beta distribution"),xlim=c(0,1),ylim = c(0, 2),xlab='x',ylab='Probability density function')
set.seed(123)
x<-seq(0,1,length.out=1000)
lines(x,dbeta(x,3,2),col='red',lwd=2)
devtools::document()
devtools::document()
install.packages("glment")
install.packages("BiocManager")
BiocManager::install("glment")
devtools::document()
devtools::document()
packageVersion("glment")
packageVersion("glmnet")
devtools::update_packages("glmnet")
devtools::update_packages("glmnet")
.libPath("glmnet")
libPath("glmnet")
install.packages("glmnet")
devtools::document()
devtools::document()
devtools::check()
install.packages("htmltools")
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
Last.error
.Last.error
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
sourceCpp(file='fibo.cpp')
devtools::document()
devtools::document()
devtools::check()
vignette <- readRDS("D:/Rlibrary/SA23204163/Meta/vignette.rds")
devtools::check()
devtools::document()
devtools::check()
devtools::document()
?plotwto
?TLMMA
?TLMMAlasso
devtools::document()
devtools::document()
?gdata
?mmalasso
?MMAlasso
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
?sigbeta
?sigx
?key
?plotwto
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::load_all()
devtools::document()
devtools::check()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
?gdata
??gdata
devtools::document()
help()
help(asNamespace)
options("repos"=c(CRAN="https://mirrors.ustc.edu.cn/CRAN/"))
if(!is.installed('installr')) install.packages('installr')
install.packages('Rcpp',dependencies = TRUE)
install.packages('roxygen2',dependencies = TRUE)
install.packages('devtools',dependencies = TRUE)
install.packages("roxygen2", dependencies = TRUE)
install.packages('devtools',dependencies = TRUE)
install.packages('Rcpp',dependencies = TRUE)
install.packages('Rcpp',dependencies = TRUE)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
library(SA23204163)
devtools::document()\
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
tools::showNonASCIIfile("TLMMA.R")
tools::showNonASCIIfile("F:\Rlibrary\SA23204163\R\TLMMA.R")
tools::showNonASCIIfile("F:/Rlibrary/SA23204163/R/TLMMA.R")
tools::showNonASCIIfile("F:/Rlibrary/SA23204163/R/TLMMA.R")
source("F:/Rlibrary/SA23204163/R/TLMMA.R")
tools::showNonASCIIfile("F:/Rlibrary/SA23204163/R/TLMMA.R")
source("F:/Rlibrary/SA23204163/R/TLMMA.R")
tools::showNonASCIIfile("F:/Rlibrary/SA23204163/R/TLMMA.R")
devtools::document()
source("F:/Rlibrary/SA23204163/R/TLMMA.R")
devtools::document()
devtools::check()
devtools::check()
source("F:/Rlibrary/SA23204163/R/TLMMA.R")
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::build_vignettes()
devtools::build_vignettes()
This is a method to improve the model average of target model estimation using multi-source domain samples under the background of transfer learning. We use the target model and M source models as candidate models. This method weights the least square estimates of these candidate models and uses the Mallows criterion to select the optimal weights. The (M+1) estimates for the target model $\boldsymbol{X}^{(0)}\boldsymbol{\beta}^{(0)}$ are
devtools::build_vignettes()
devtools::document()
devtools::build_vignettes()
.Last.error
getwd()
devtools::document()
devtools::build_vignettes()
devtools::document()
devtools::build_vignettes()
devtools::document()
devtools::build_vignettes()
devtools::document()
devtools::build_vignettes()
devtools::document()
devtools::build_vignettes()
devtools::document()
devtools::build_vignettes()
devtools::document()
devtools::build_vignettes()
devtools::document()
devtools::build_vignettes()
devtools::document()
devtools::build_vignettes()
devtools::document()
devtools::build_vignettes()
devtools::document()
devtools::build_vignettes()
devtools::document()
devtools::build_vignettes()
devtools::document()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::document()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::document()
devtools::document()
devtools::build_vignettes()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::build_vignettes()
devtools::build(vignettes=FALSE)
install.packages('../SA23204163_1.0.tar.gz',repo=NULL)
getwd()
file='../src/gdata.cpp'
file
n_vec = c(n0,rep(nk,M)) # Sample size of target sample and source samples
MSEjf[sizeA0+1]=MSEjf[sizeA0+1]/cs
MSEjf[sizeA0+1]=MSEjf[sizeA0+1]/cs
p=20;  h=2; s=11;  n0=100;  nk=50;  M=10;  sigbeta=0.4; sigx=diag(1,p); keyjf=1
TLMMA(h,p,s,n0,nk,M,sigbeta,sigx,keyjf)
TLMMA <-  function(h,p,s,n0,nk,M,sigbeta,sigx,keyjf)
{
## Initialize the data
cs=100;# 100 independent repetitions
betahat0=0;
sizeA0  =  0  # Number of elements of set A
n_vec = c(n0,rep(nk,M)) # Sample size of target sample and source samples
MSEjf = matrix(0,nrow = M+1,ncol = 1)# MSE
pMSEjf = matrix(0,nrow = M+1,ncol = 1)# PMSE
wjf = matrix(0,nrow = M+1,ncol = M+1)# The weight assigned to each candidate model
for (sizeA0 in 0:M)
{
A0 = 1: sizeA0
sourceCpp(file='../src/gdata.cpp')
for(t in 1:cs)
{
beta=gdata(h,p,s,M,sigbeta,keyjf,sizeA0,nk)
beta0=beta[,1]
B=beta[,2:(M+1)]
d = matrix(0,nrow = M+1, ncol = 1)
D = matrix(0,nrow = n0, ncol = M+1)
D0 = matrix(0,nrow = M+1, ncol = M+1)
b =  NULL
x0 = rmvnorm(n0, rep(0, p), sigx)   # x0 is the target sample
y0 = x0 %*% beta0 + rnorm (n0, 0, 1) # y0 is the target sample
xc = rmvnorm(n0, rep(0, p), sigx)   # xc is the test sample
##Step1 least squares estimation
fit = lm(y0~x0+0)
bb = coefficients(fit)
bb[is.na(bb)] = 0
b = cbind(b,bb)
A = matrix(rep(y0,M+1),ncol = M+1,nrow = n0, byrow = F)
for (k in 1:M) {
xk = rmvnorm(n_vec[k+1], rep(0, p), sigx)  #x1 to xM are auxiliary samples
yk = xk %*% B[,k] + rnorm (n_vec[k+1], 0, 1)
fit = lm(yk~xk+0)
bb = coefficients(fit)
bb[is.na(bb)] = 0
b = cbind(b,bb)
}
##Step2 Calculate D,D0,d,a3,a4 to prepare for quadratic programming
ehat = y0 - x0 %*% b[,1]           ## Residual estimate for the M th alternate matrix
sighat = (t(ehat) %*% ehat)/(n0-p)       ## Estimates of the variance matrix
D = A-x0%*%b
D0 = 2*t(D)%*%D
d = c(-2*sighat*p,rep(0,M))
a3 = t(rbind(matrix(1,nrow = 1,ncol = M+1),diag(M+1),-diag(M+1)))
a4 = rbind(1,matrix(0,nrow = M+1,ncol = 1),matrix(-1,nrow = M+1,ncol = 1))
##Step3 Quadratic programming solution
QP = solve.QP(Dmat = D0,dvec = d,Amat = a3, bvec = a4,meq = 1,factorized = FALSE)
w = QP$solution
w = as.matrix(w)
w = w*(w>0)
w = w/sum(w)
betahat = b %*% w                 ## Estimate the weighted parameters
## Step4 Calculate MSE and PMSE
MSEjf[sizeA0+1] = MSEjf[sizeA0+1]+sum((betahat-beta0)^2)
pMSEjf[sizeA0+1] = pMSEjf[sizeA0+1]+mean((xc%*%(beta0-betahat))^2)
wjf[,(sizeA0+1)] = wjf[,(sizeA0+1)]+w
betahat0=betahat0+betahat
}
MSEjf[sizeA0+1]=MSEjf[sizeA0+1]/cs
pMSEjf[sizeA0+1]=pMSEjf[sizeA0+1]/cs
wjf[,(sizeA0+1)]=wjf[,(sizeA0+1)]/cs
betahat0=betahat0/cs
}
return(list(MSEjf = MSEjf,pMSEjf = pMSEjf,wjf = wjf, betahat = betahat0))
}
p=20;  h=2; s=11;  n0=100;  nk=50;  M=10;  sigbeta=0.4; sigx=diag(1,p); keyjf=1
TLMMA(h,p,s,n0,nk,M,sigbeta,sigx,keyjf)
library("Rcpp")
TLMMA(h,p,s,n0,nk,M,sigbeta,sigx,keyjf)
library("Rcpp")
TLMMA <-  function(h,p,s,n0,nk,M,sigbeta,sigx,keyjf)
{
## Initialize the data
cs=100;# 100 independent repetitions
betahat0=0;
sizeA0  =  0  # Number of elements of set A
n_vec = c(n0,rep(nk,M)) # Sample size of target sample and source samples
MSEjf = matrix(0,nrow = M+1,ncol = 1)# MSE
pMSEjf = matrix(0,nrow = M+1,ncol = 1)# PMSE
wjf = matrix(0,nrow = M+1,ncol = M+1)# The weight assigned to each candidate model
for (sizeA0 in 0:M)
{
A0 = 1: sizeA0
sourceCpp(file='./src/gdata.cpp')
for(t in 1:cs)
{
beta=gdata(h,p,s,M,sigbeta,keyjf,sizeA0,nk)
beta0=beta[,1]
B=beta[,2:(M+1)]
d = matrix(0,nrow = M+1, ncol = 1)
D = matrix(0,nrow = n0, ncol = M+1)
D0 = matrix(0,nrow = M+1, ncol = M+1)
b =  NULL
x0 = rmvnorm(n0, rep(0, p), sigx)   # x0 is the target sample
y0 = x0 %*% beta0 + rnorm (n0, 0, 1) # y0 is the target sample
xc = rmvnorm(n0, rep(0, p), sigx)   # xc is the test sample
##Step1 least squares estimation
fit = lm(y0~x0+0)
bb = coefficients(fit)
bb[is.na(bb)] = 0
b = cbind(b,bb)
A = matrix(rep(y0,M+1),ncol = M+1,nrow = n0, byrow = F)
for (k in 1:M) {
xk = rmvnorm(n_vec[k+1], rep(0, p), sigx)  #x1 to xM are auxiliary samples
yk = xk %*% B[,k] + rnorm (n_vec[k+1], 0, 1)
fit = lm(yk~xk+0)
bb = coefficients(fit)
bb[is.na(bb)] = 0
b = cbind(b,bb)
}
##Step2 Calculate D,D0,d,a3,a4 to prepare for quadratic programming
ehat = y0 - x0 %*% b[,1]           ## Residual estimate for the M th alternate matrix
sighat = (t(ehat) %*% ehat)/(n0-p)       ## Estimates of the variance matrix
D = A-x0%*%b
D0 = 2*t(D)%*%D
d = c(-2*sighat*p,rep(0,M))
a3 = t(rbind(matrix(1,nrow = 1,ncol = M+1),diag(M+1),-diag(M+1)))
a4 = rbind(1,matrix(0,nrow = M+1,ncol = 1),matrix(-1,nrow = M+1,ncol = 1))
##Step3 Quadratic programming solution
QP = solve.QP(Dmat = D0,dvec = d,Amat = a3, bvec = a4,meq = 1,factorized = FALSE)
w = QP$solution
w = as.matrix(w)
w = w*(w>0)
w = w/sum(w)
betahat = b %*% w                 ## Estimate the weighted parameters
## Step4 Calculate MSE and PMSE
MSEjf[sizeA0+1] = MSEjf[sizeA0+1]+sum((betahat-beta0)^2)
pMSEjf[sizeA0+1] = pMSEjf[sizeA0+1]+mean((xc%*%(beta0-betahat))^2)
wjf[,(sizeA0+1)] = wjf[,(sizeA0+1)]+w
betahat0=betahat0+betahat
}
MSEjf[sizeA0+1]=MSEjf[sizeA0+1]/cs
pMSEjf[sizeA0+1]=pMSEjf[sizeA0+1]/cs
wjf[,(sizeA0+1)]=wjf[,(sizeA0+1)]/cs
betahat0=betahat0/cs
}
return(list(MSEjf = MSEjf,pMSEjf = pMSEjf,wjf = wjf, betahat = betahat0))
}
TLMMA(h,p,s,n0,nk,M,sigbeta,sigx,keyjf)
library("Rcpp")
library(mvtnorm)
library(quadprog)
TLMMA(h,p,s,n0,nk,M,sigbeta,sigx,keyjf)
devtools::document()
devtools::document()
devtools::document()
rm(list = c("gdata", "TLMMA"))
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::build_vignettes()
devtools::build(vignettes=FALSE)
devtools::document()
devtools::build(vignettes=FALSE)
devtools::document()
devtools::build(vignettes=FALSE)
?cppfunction
devtools::document()
devtools::check()
devtools::check()
devtools::document()
devtools::check()
devtools::build(vignettes=FALSE)
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::build(vignettes=FALSE)
devtools::build_vignettes()
devtools::build(vignettes=FALSE)
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build(vignettes=FALSE)
devtools::document()
devtools::document()
devtools::check()
devtools::build_vignettes()
devtools::build(vignettes=FALSE)
devtools::document()
devtools::build_vignettes()
devtools::document()
devtools::build_vignettes()
devtools::build(vignettes=FALSE)
